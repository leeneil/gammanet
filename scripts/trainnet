#!/usr/bin/env python

import torch
from gammanet import models
from gammanet import utils

# -------------------------------
# PARAMETERS

nx, ny        = 32, 32  # image size
n_train       = 9000
n_test        = 1000

k_bar         = 0.01    # photons/px
contrast      = 0.9     # 
corr_len      = 0.2     # px
sigma         = 2.0     # px
epsilon_gain  = 0.03    # adu
epsilon_ped   = 0.05    # adu

max_n_photons = 128
batch_size    = 128
num_epochs    = 100

# -------------------------------

params = (nx, ny, k_bar, contrast, corr_len,
          sigma, epsilon_gain, epsilon_ped, 
          max_n_photons, batch_size)

train_loader = utils.create_loader(*(n_train,) + params)
test_loader  = utils.create_loader(*(n_test,)  + params)

device = torch.device('cuda')

model     = models.ConvNet(max_photons=max_n_photons)
loss_fxn  = models.photon_loss
optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)

# -------------------------------

model.to(device)

train_error = []
test_error  = []

for epoch in range(num_epochs):

    epoch_train_error = 0.0
    total_step = len(train_loader)
    for i, (images, labels) in enumerate(train_loader):

        images = images.to(device)
        labels = labels.to(device)

        # forward pass
        outputs = model(images)
        loss = loss_fxn(labels, outputs)
        epoch_train_error += loss.item()

        # backprop 
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if (i + 1) % 10 == 0:
            print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'
                  .format(epoch + 1, num_epochs, i + 1, total_step, loss.item()))

    train_error.append(epoch_train_error / total_step) # divide by size of loader


    epoch_test_error = 0.0
    total_step = len(train_loader)
    for j, (images, labels) in enumerate(test_loader):

        images = images.to(device)
        labels = labels.to(device)

        with torch.no_grad():
        
            outputs = model(images)
            loss = loss_fxn(labels, outputs)
            epoch_test_error += loss.item()

    test_error.append(epoch_test_error / total_step) # divide by size of loader


# save the following and analysis of the following
#print(test_error)
#print(train_error)
# true/false pos/neg
# the model :)


